# PseudoCore v2.0 Makefile
# High-Performance Data Management System

# Compiler and flags
CC = gcc
CFLAGS = -std=c11 -Wall -Wextra -O2 -g -D_GNU_SOURCE
LDFLAGS = -lpthread -lzstd -lz

# Directories
SRCDIR = .
OBJDIR = obj
BINDIR = bin

# Source files
SOURCES = core_entity.c \
          task_entity.c \
          block_entity.c \
          cache_engine.c \
          compression_engine.c \
          storage_engine.c \
          core_manager.c \
          pseudo_core_v2.c

# Object files
OBJECTS = $(SOURCES:%.c=$(OBJDIR)/%.o)

# Target executable
TARGET = $(BINDIR)/pseudo_core_v2

# Default target
all: directories $(TARGET)

# Create necessary directories
directories:
	@mkdir -p $(OBJDIR)
	@mkdir -p $(BINDIR)

# Compile object files
$(OBJDIR)/%.o: $(SRCDIR)/%.c
	@echo "Compiling $<..."
	@$(CC) $(CFLAGS) -c $< -o $@

# Link executable
$(TARGET): $(OBJECTS)
	@echo "Linking $(TARGET)..."
	@$(CC) $(OBJECTS) -o $(TARGET) $(LDFLAGS)
	@echo "Build completed successfully!"

# Clean build artifacts
clean:
	@echo "Cleaning build artifacts..."
	@rm -rf $(OBJDIR) $(BINDIR)
	@echo "Clean completed!"

# Install dependencies (Ubuntu/Debian)
install-deps:
	@echo "Installing dependencies..."
	@sudo apt-get update
	@sudo apt-get install -y build-essential libzstd-dev zlib1g-dev
	@echo "Dependencies installed!"

# Install dependencies (CentOS/RHEL/Fedora)
install-deps-rpm:
	@echo "Installing dependencies..."
	@sudo yum install -y gcc make libzstd-devel zlib-devel
	@echo "Dependencies installed!"

# Run the application
run: $(TARGET)
	@echo "Starting PseudoCore v2.0..."
	@$(TARGET)

# Run with specific configuration
run-debug: CFLAGS += -DDEBUG=1
run-debug: $(TARGET)
	@echo "Starting PseudoCore v2.0 in debug mode..."
	@$(TARGET)

# Create storage file
create-storage:
	@echo "Creating storage file..."
	@dd if=/dev/zero of=storage_swap_v2.img bs=1M count=1024
	@echo "Storage file created: storage_swap_v2.img"

# Run tests (placeholder)
test:
	@echo "Running tests..."
	@echo "Tests not implemented yet"

# Generate documentation
docs:
	@echo "Generating documentation..."
	@echo "Documentation generation not implemented yet"

# Static analysis with cppcheck
analyze:
	@echo "Running static analysis..."
	@cppcheck --enable=all --std=c11 $(SOURCES)

# Memory leak detection with valgrind
valgrind: $(TARGET)
	@echo "Running with valgrind..."
	@valgrind --leak-check=full --show-leak-kinds=all $(TARGET)

# Performance profiling with gprof
profile: CFLAGS += -pg
profile: LDFLAGS += -pg
profile: $(TARGET)
	@echo "Running with profiling..."
	@$(TARGET)
	@gprof $(TARGET) gmon.out > profile.txt
	@echo "Profile results saved to profile.txt"

# Build release version
release: CFLAGS = -std=c11 -Wall -Wextra -O3 -DNDEBUG -D_GNU_SOURCE
release: $(TARGET)

# Build with address sanitizer
asan: CFLAGS += -fsanitize=address -fno-omit-frame-pointer
asan: LDFLAGS += -fsanitize=address
asan: $(TARGET)

# Build with thread sanitizer
tsan: CFLAGS += -fsanitize=thread
tsan: LDFLAGS += -fsanitize=thread
tsan: $(TARGET)

# Build with undefined behavior sanitizer
ubsan: CFLAGS += -fsanitize=undefined
ubsan: LDFLAGS += -fsanitize=undefined
ubsan: $(TARGET)

# Package for distribution
package: release
	@echo "Creating package..."
	@mkdir -p package/pseudo_core_v2
	@cp $(TARGET) package/pseudo_core_v2/
	@cp README.md package/pseudo_core_v2/ 2>/dev/null || echo "README.md not found"
	@cp LICENSE package/pseudo_core_v2/ 2>/dev/null || echo "LICENSE not found"
	@tar -czf pseudo_core_v2.tar.gz -C package pseudo_core_v2
	@rm -rf package
	@echo "Package created: pseudo_core_v2.tar.gz"

# Help target
help:
	@echo "PseudoCore v2.0 Build System"
	@echo "============================"
	@echo ""
	@echo "Available targets:"
	@echo "  all              - Build the application (default)"
	@echo "  clean            - Remove build artifacts"
	@echo "  install-deps     - Install dependencies (Ubuntu/Debian)"
	@echo "  install-deps-rpm - Install dependencies (CentOS/RHEL/Fedora)"
	@echo "  run              - Build and run the application"
	@echo "  run-debug        - Build and run in debug mode"
	@echo "  create-storage   - Create storage file"
	@echo "  test             - Run tests"
	@echo "  docs             - Generate documentation"
	@echo "  analyze          - Run static analysis"
	@echo "  valgrind         - Run with memory leak detection"
	@echo "  profile          - Run with performance profiling"
	@echo "  release          - Build optimized release version"
	@echo "  asan             - Build with address sanitizer"
	@echo "  tsan             - Build with thread sanitizer"
	@echo "  ubsan            - Build with undefined behavior sanitizer"
	@echo "  package          - Create distribution package"
	@echo "  help             - Show this help message"
	@echo ""
	@echo "Environment variables:"
	@echo "  CC               - C compiler (default: gcc)"
	@echo "  CFLAGS           - C compiler flags"
	@echo "  LDFLAGS          - Linker flags"

# Phony targets
.PHONY: all clean install-deps install-deps-rpm run run-debug create-storage test docs analyze valgrind profile release asan tsan ubsan package help directories

# Dependencies
$(OBJDIR)/core_entity.o: core_entity.h
$(OBJDIR)/task_entity.o: task_entity.h core_entity.h
$(OBJDIR)/block_entity.o: block_entity.h
$(OBJDIR)/cache_engine.o: cache_engine.h block_entity.h
$(OBJDIR)/compression_engine.o: compression_engine.h
$(OBJDIR)/storage_engine.o: storage_engine.h block_entity.h
$(OBJDIR)/core_manager.o: core_manager.h core_entity.h task_entity.h cache_engine.h compression_engine.h storage_engine.h
$(OBJDIR)/pseudo_core_v2.o: core_entity.h task_entity.h block_entity.h cache_engine.h compression_engine.h storage_engine.h core_manager.h 